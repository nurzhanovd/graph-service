scalar Upload
scalar Void

type File {
  filename: ID!
  mimetype: String!
  encoding: String!
}

type Node {
  uuid: ID!
  root: Boolean
  title: String!
  description: String
  content: [String]
  childes: [Node] @relation(name: "DEPENDS_ON", direction: "OUT")
  parent: Node @relation(name: "DEPENDS_ON", direction: "IN")
}

type Tag {
  uuid: ID!
  title: String
  for: [Node] @relation(name: "TAGGED", direction: "OUT")
}

type Relation {
  from: ID!
  to: ID!
}

type TreeNodePayload {
  nodes: [Node]
  rels: [Relation]
}

type GenericSearchResult {
  uuid: ID!
  title: String
  description: String
  score: Int!
  type: String
}

type Query {
  TreeNode(uuid: ID!): TreeNodePayload
  CurrentUser: [AuthPayload]
  IsNodeFulFilled(userId: ID!, nodeId: ID!): Boolean
  NodeToRootPath(nodeId: ID!): [Node]
  NodeNeighbours(nodeId: ID!): [Node]
  SearchForNodesAndTags(searchString: String!, limit: Int, offset: Int): [GenericSearchResult]
}

type AuthError {
  key: String!
  value: String!
}

type AuthPayload {
  token: String
  uuid: String
  email: String
  username: String
  errors: [AuthError]
}

type Query {
  TreeNode(uuid: ID!): TreeNodePayload
  IsNodeFulFilled(userId: ID!, nodeId: ID!): Boolean
  NodeToRootPath(nodeId: ID!): [Node]
  NodeNeighbours(nodeId: ID!): [Node]
  SearchForNodesAndTags(searchString: String!, limit: Int, offset: Int): [GenericSearchResult]
  CurrentUser: AuthPayload
  GetCompletedNodes: [Node]
}


type Mutation {
  DeleteFileAndRemoveFromDb(filename:ID!): File
  UploadFile(file: Upload!): File!
  SignUp(username: String!, email: String!, password: String!, confirmPassword: String!): AuthPayload
  SignIn(login: String!, password: String!): AuthPayload
  CreateRoadMap(roadMapRelation: [[String]], nodeRoadMapRelation: [[String]]): String
  FulfillNode(uuid: ID!): Boolean
}
