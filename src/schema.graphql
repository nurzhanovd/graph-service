scalar Upload
scalar Void

type File {
  filename: ID!
  mimetype: String!
  encoding: String!
}

type Node {
  uuid: ID!
  title: String!
}

type Relation {
  from: ID!
  to: ID!
}

type TreeNodePayload {
  nodes: [Node]
  rels: [Relation]
}


type Query {
  TreeNode(uuid: ID!): TreeNodePayload
}

type AuthError {
  key: String!
  value: String!
}

type AuthPayload {
  token: String
  name: String
  uuid: String
  surname: String
  email: String
  username: String
  errors: [AuthError]
}


type Mutation {
  DeleteFileAndRemoveFromDb(filename:ID!): File
  UploadFile(file: Upload!): File!
  SignUp(name: String!, surname: String!, username: String!, email: String!, password: String!, confirmPassword: String!): AuthPayload
  SignIn(login: String!, password: String!): AuthPayload
  CreateRoadMap(roadMapRelation: [[String]], nodeRoadMapRelation: [[String]]): String
  FulfillNode(uuid: ID!): Void
}
